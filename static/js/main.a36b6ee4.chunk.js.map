{"version":3,"sources":["serviceWorker.js","List.js","TodoList.js","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","List","props","react_default","a","createElement","items","map","item","index","key","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","setState","term","target","value","onSubmit","preventDefault","concat","toConsumableArray","state","className","src_List","React","Component","ReactDOM","render","TodoList_TodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4IAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+GCRSC,SARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,UAEIH,EAAMI,MAAMC,IAAI,SAACC,EAAMC,GAAP,OAAiBN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,GAAQD,QCuBnCG,2BACjB,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KAMRiB,SAAW,SAACC,GACVR,EAAKS,SAAS,CAACC,KAAMF,EAAMG,OAAOC,SARjBZ,EAWnBa,SAAW,SAACL,GACVA,EAAMM,iBACNd,EAAKS,SAAS,CACZC,KAAM,GACNhB,MAAK,GAAAqB,OAAAd,OAAAe,EAAA,EAAAf,CAAMD,EAAKiB,MAAMvB,OAAjB,CAAwBM,EAAKiB,MAAMP,UAb1CV,EAAKiB,MAAQ,CACXP,KAAM,GACNhB,MAAO,IAJQM,wEAqBjB,OACAT,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,WAAWL,SAAUV,KAAKU,UACxCtB,EAAAC,EAAAC,cAAA,SAAOmB,MAAOT,KAAKc,MAAMP,KAAMH,SAAUJ,KAAKI,WAC9ChB,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAAC0B,EAAD,CAAMzB,MAAOS,KAAKc,MAAMvB,gBA5BM0B,IAAMC,YCtB5CC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAcC,SAASC,eAAe,SH2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FInInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a36b6ee4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst List = props => (\r\n  <ul>\r\n    {\r\n      props.items.map((item, index) => <li key={index}>{item}</li>)\r\n    }\r\n  </ul>\r\n);\r\n\r\nexport default List;","import React from 'react';\nimport logo from './logo.svg';\nimport List from './List.js'\nimport './TodoList.css';\nimport { tsConstructorType } from '@babel/types';\n\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n} */\n\nexport default class TodoList extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        term: '',\n        items: [],\n      };\n    }\n    onChange = (event) => {\n      this.setState({term: event.target.value});\n    }\n\n    onSubmit = (event) => {\n      event.preventDefault();\n      this.setState({\n        term: '',\n        items: [...this.state.items, this.state.term],\n      });\n    }\n   \n    \n    render() {\n      return (\n      <div>\n        <form className=\"TodoList\" onSubmit={this.onSubmit}>\n          <input value={this.state.term} onChange={this.onChange} />\n          <button>Submit</button>\n        </form>\n        <List items={this.state.items} />\n      </div>\n      );\n    };\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport TodoList from './TodoList';\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}